package com.graphics{	import flash.display.GradientType;	import flash.display.InterpolationMethod;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.geom.Point;		import com.maths.geometrica;	public class BolaMocha extends Sprite{				private var _color:uint;		private var _radio:Number;		private var _anguloInicio:Number;		private var _anguloApertura:Number;		private var _grosorTajada:Number;		private var _steps:int;		private var anguloTraslado:Number = 0;		private var puntoTraslado:Point = new Point();				private var _degradadoActivo:Boolean = false;				private var _tipo:String;		private var _colores:Array;		private var _alphas:Array; 		private var _posiciones:Array;				public function BolaMocha(color:uint, radio:Number, anguloInicio:Number, anguloApertura:Number, grosorTajada:Number, steps:int = 500):void{			_color = color;			_radio = radio;			_anguloInicio = anguloInicio;			_anguloApertura = anguloApertura;			_grosorTajada = grosorTajada;			_steps = steps;						init();		}		public function init():void{			this.graphics.clear();			this.graphics.beginFill(_color, 1);			this.graphics.moveTo (_radio,0);			for(var i:int = 0; i<=360*10; i++){				if(anguloTraslado >= _anguloInicio && anguloTraslado <= _anguloApertura+_anguloInicio){					puntoTraslado = Point.polar(_radio-_grosorTajada,anguloTraslado);					anguloTraslado = geometrica.toRadians(i/10);					this.graphics.lineTo(puntoTraslado.x,puntoTraslado.y);				}else if (anguloTraslado <= geometrica.toRadians(360)){					puntoTraslado = Point.polar(_radio,anguloTraslado);					anguloTraslado = geometrica.toRadians(i/10);					this.graphics.lineTo(puntoTraslado.x,puntoTraslado.y);				}else{					this.graphics.endFill();				}			}		}		public function degradado(tipo:String,colores:Array,alphas:Array,posiciones:Array):void		{			_tipo = tipo;			_colores = colores;			_alphas = alphas; 			_posiciones = posiciones;			_degradadoActivo = true;						this.graphics.clear();			var spreadMethod:String = SpreadMethod.PAD; 			var interp:String = InterpolationMethod.LINEAR_RGB; 			var focalPtRatio:Number = 0; 						var matrix:Matrix = new Matrix(); 			var boxWidth:Number = _radio*4; 			var boxHeight:Number = _radio*4; 			var boxRotation:Number = 0;//Math.PI/2; // 90° 			var tx:Number = -_radio; 			var ty:Number = -_radio*2; 			matrix.createGradientBox(boxWidth, boxHeight, boxRotation, tx, ty);			this.graphics.beginGradientFill(tipo, colores, alphas, posiciones, matrix, spreadMethod, interp, focalPtRatio);			this.graphics.moveTo (_radio,0);						for(var i:int = 0; i<=360*10; i++){								if(anguloTraslado >= _anguloInicio && anguloTraslado <= _anguloApertura+_anguloInicio){					puntoTraslado = Point.polar(_radio-_grosorTajada,anguloTraslado);					anguloTraslado = geometrica.toRadians(i/10);					this.graphics.lineTo(puntoTraslado.x,puntoTraslado.y);				}else if (anguloTraslado <= geometrica.toRadians(360)){					puntoTraslado = Point.polar(_radio,anguloTraslado);					anguloTraslado = geometrica.toRadians(i/10);					this.graphics.lineTo(puntoTraslado.x,puntoTraslado.y);				}else{					this.graphics.endFill();				}			}		}		public function get radio():Number		{			return _radio;		}		public function set radio(value:Number):void		{			_radio = value;			if(_degradadoActivo)				degradado(_tipo,_colores,_alphas,_posiciones)			else				init();		}		public function get anguloInicio():Number		{			return _anguloInicio;		}		public function set anguloInicio(value:Number):void		{			_anguloInicio = value;			if(_degradadoActivo)				degradado(_tipo,_colores,_alphas,_posiciones)			else				init();		}		public function get anguloApertura():Number		{			return _anguloApertura;		}		public function set anguloApertura(value:Number):void		{			_anguloApertura = value;			if(_degradadoActivo)				degradado(_tipo,_colores,_alphas,_posiciones)			else				init();		}		public function get grosorTajada():Number		{			return _grosorTajada;		}		public function set grosorTajada(value:Number):void		{			_grosorTajada = value;			if(_degradadoActivo)				degradado(_tipo,_colores,_alphas,_posiciones)			else				init();		}		public function get steps():int
		{
			return _steps;
		}		public function set steps(value:int):void
		{
			_steps = value;			if(_degradadoActivo)				degradado(_tipo,_colores,_alphas,_posiciones)			else				init();
		}		public function get color():uint
		{
			return _color;
		}		public function set color(value:uint):void
		{
			_color = value;			init();
		}	}}